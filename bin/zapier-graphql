#!/usr/bin/env node --experimental-modules --no-warnings

'use strict';

const fs = require('fs');

const { Command } = require('commander');
const inquirer = require('inquirer');
const chalk = require('chalk');

const {
  addCreateMutation,
  addTriggerQuery,
  addSearchQuery,
  updateConfiguredOperations,
  createActionFile,
  createDefaultConfigFile,
  removeAllZapierFiles,
} = require('zapier-graphql');


/**
 * Log an error message and exit the process.
 *
 * @param {String} message
 */
const error = (message) => {
  console.error(chalk.red(message));
  process.exit(1);
}


const validate = async () => {
  // Validate that we're in the correct directory
  if (!fs.existsSync(`${process.cwd()}/.zapierapprc`)) {
    error('You must run this script from the root of a Zapier CLI project (.zapierapprc not found).');
  }

  if (!fs.existsSync(`${process.cwd()}/.zapiergraphql`)) {
    const confirmation = await inquirer.prompt([{
      type: 'confirm',
      name: 'confirm',
      message: 'This looks like a new zapier-graphql project.  Would you like to initialize it?',
      default: true,
    }]);

    if (!confirmation.confirm) {
      process.exit(1);
    }

    const answers = await inquirer.prompt([{
      type: 'input',
      name: 'urlEnvVar',
      message: 'What environment variable contains the GraphQL API URL?',
      default: 'GRAPHQL_URL',
    }]);

    await createDefaultConfigFile(answers.urlEnvVar);
  }
}


const program = new Command();
program
  .name('zapier-graphql')
  .description('A CLI tool for generating and updating GraphQL files for Zapier Platform CLI.')
  .version(require(`${__dirname}/../package.json`).version);

program.command('init')
  .description('Initializes a new zapier-graphql project.')
  .action(async () => {
    await validate();
  });

// Configure all the scaffold sub-commands
const scaffold = program.command('scaffold')
  .description(`Similar to the "zapier scaffold" command, but for GraphQL operations.`);

scaffold.command('trigger')
  .description('Scaffold a trigger query (must be a query).')
  .argument('<string>', 'The name of the GraphQL query (e.g. "contacts", "widget").')
  .action(async (queryName) => {
    await validate();
    await addTriggerQuery(queryName);
  });

scaffold.command('create')
  .description('Scaffold a create mutation (must be a mutation).')
  .argument('<string>', 'The name of the GraphQL mutation (e.g. "addContact", "doSomething").')
  .action(async (mutationName) => {
    await validate();
    await addCreateMutation(mutationName);
  });

scaffold.command('search')
  .description('Scaffold a search query (must be a query and have input fields).')
  .argument('<string>', 'The name of the GraphQL query (e.g. "contacts", "user").')
  .action(async (queryName) => {
    await validate();
    await addSearchQuery(queryName);
  });

// Configure the update command
const update = program.command('update')
  .description('Updates an action file for the GraphQL operation.');

update.command('all')
  .description('Updates all the configured action files.')
  .action(async () => {
    await validate();
    await updateConfiguredOperations();
  });

update.command('trigger')
  .description('Updates a trigger action file.')
  .argument('<string>', 'The name of the GraphQL query (e.g. "contacts", "user").')
  .action(async (queryName) => {
    await validate();
    await createActionFile('trigger', queryName);
  });

update.command('create')
  .description('Updates a create action file.')
  .argument('<string>', 'The name of the GraphQL mutation (e.g. "addContact", "doSomething").')
  .action(async (mutationName) => {
    await validate();
    await createActionFile('create', mutationName);
  });

update.command('search')
  .description('Updates a search action file.')
  .argument('<string>', 'The name of the GraphQL query (e.g. "contacts", "user").')
  .action(async (queryName) => {
    await validate();
    await createActionFile('search', queryName);
  });

// Cleans up all the Zapier specific files, leaving only your `graphql` directory (query and mutation files)
program.command('clean')
  .description(`Cleans up all the Zapier specific files (creates, triggers, and searches - tests too).
Warning - this is basically a reset and a destructive operation.  Following this, you will need to update your app index.js accordingly.`)
  .action(async () => {
    const answers = await inquirer.prompt([{
      type: 'confirm',
      name: 'confirm',
      message: 'Are you sure you want to delete all the Zapier specific files?',
      default: false,
    }]);

    if (answers.confirm) {
      await validate();
      await removeAllZapierFiles();
    }
  });

program.parse(process.argv);
