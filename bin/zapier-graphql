#!/usr/bin/env node --experimental-modules --no-warnings

'use strict';

const fs = require('fs');

const { Command } = require('commander');
const inquirer = require('inquirer');
const chalk = require('chalk');

const {
  addCreateMutation,
  addTriggerQuery,
  addSearchQuery,
  updateConfiguredOperations,
  createConfigFile,
  createMutationFile,
  createQueryFile,
  createAllOpreationFiles,
  removeAllZapierFiles,
} = require('zapier-graphql');


/**
 * Log an error message and exit the process.
 *
 * @param {String} message
 */
const error = (message) => {
  console.error(chalk.red(message));
  process.exit(1);
}


const validate = async () => {
  // Validate that we're in the correct directory
  if (!fs.existsSync(`${process.cwd()}/.zapierapprc`)) {
    error('You must run this script from the root of a Zapier CLI project (.zapierapprc not found).');
  }

  if (!fs.existsSync(`${process.cwd()}/.zapiergraphql`)) {
    const confirmation = await inquirer.prompt([{
      type: 'confirm',
      name: 'confirm',
      message: 'This looks like a new zapier-graphql project.  Would you like to initialize it?',
      default: true,
    }]);

    if (!confirmation.confirm) {
      process.exit(1);
    }

    const answers = await inquirer.prompt([{
      type: 'input',
      name: 'urlEnvVar',
      message: 'What environment variable contains the GraphQL API URL?',
      default: 'GRAPHQL_URL',
    }]);

    await createConfigFile(answers.urlEnvVar);
  }
}


const program = new Command();
program
  .name('zapier-graphql')
  .description('A CLI tool for generating and updating GraphQL files for Zapier Platform CLI.')
  .version(require(`${__dirname}/../package.json`).version);

program.command('init')
  .description('Initializes a new zapier-graphql project.')
  .action(async () => {
    await validate();
  });

// Configure all the scaffold sub-commands
const scaffold = program.command('scaffold')
  .description(`Creates the necessary GraphQL operation file, Zapier extension file, test file, and
updates the Zapier app index.js.  Similar to the "zapier scaffold" command, but for GraphQL operations.`);

scaffold.command('triggers')
  .description('Scaffold a trigger query (must be a query).')
  .argument('<string>', 'The name of the GraphQL query (e.g. "contacts", "widget").')
  .action(async (queryName) => {
    await validate();
    await addTriggerQuery(queryName);
  });

scaffold.command('creates')
  .description('Scaffold a create mutation (must be a mutation).')
  .argument('<string>', 'The name of the GraphQL mutation (e.g. "addContact", "doSomething").')
  .action(async (mutationName) => {
    await validate();
    await addCreateMutation(mutationName);
  });

scaffold.command('searches')
  .description('Scaffold a search query (must be a query and have input fields).')
  .argument('<string>', 'The name of the GraphQL query (e.g. "contacts", "user").')
  .action(async (queryName) => {
    await validate();
    await addSearchQuery(queryName);
  });

// Configure the update command
program.command('update')
  .description('Updates the base operations files (./graphql/*) configured in your Zapier app index.js.')
  .action(async () => {
    await validate();
    await updateConfiguredOperations();
  });

// Creates or updates GraphQL operation files
const create = program.command('create')
  .description('Creates or updates a GraphQL operation file.');

create.command('all')
  .description('Creates or updates all the GraphQL operation files in your API schema.')
  .action(async () => {
    await validate();
    await createAllOpreationFiles();
  });

create.command('query')
  .argument('<string>', 'The name of the GraphQL query (e.g. "contacts", "user").')
  .action(async (queryName) => {
    await validate();
    await createQueryFile(queryName);
  });

create.command('mutation')
  .argument('<string>', 'The name of the GraphQL mutation (e.g. "addContact", "doSomething").')
  .action(async (mutationName) => {
    await validate();
    await createMutationFile(mutationName);
  });


// Cleans up all the Zapier specific files, leaving only your `graphql` directory (query and mutation files)
program.command('clean')
  .description(`Cleans up all the Zapier specific files (creates, triggers, and searches - tests too),
leaving only your "graphql" directory (query and mutation files).  This is basically a reset.  Do not
run this command if you've customized your "extension" files, the ones in "creates", "triggers", or
"searches".  Also don't run it if you have customized tests you want preserved (authentication.js test
isn't touched).`)
  .action(async () => {
    const answers = await inquirer.prompt([{
      type: 'confirm',
      name: 'confirm',
      message: 'Are you sure you want to delete all the Zapier specific files?',
      default: false,
    }]);

    if (answers.confirm) {
      await validate();
      await removeAllZapierFiles();
    }
  });

program.parse(process.argv);
